webdeploy - v0.2.0
--------------------------------------------------------------------------------
Webdeploy is a command-line tool for building and deploying websites from git
repositories. It employs NodeJS and nodegit (node bindings for libgit2).

Primary authors:

    Roger Gee <roger.gee@tulsalibrary.org>

--------------------------------------------------------------------------------
Installation

You should install webdeploy globally on your system, providing "webdeploy.js"
to your PATH. Non-standard webdeploy plugin modules should be installed under
this global location as well.

NOTE: At some point webdeploy might get on npm, so you'd be able to install it
that way.

--------------------------------------------------------------------------------
Methodology

This is a lightweight tool that implements a build and deployment pipeline. The
pipeline operates on a filesystem tree OR a git repository tree. (This is
collectively called the "target tree".) The pipeline's job is to map certain
targets within the target tree to their respective output variants. This can be
as simple as copying a file to an output directory or converting the contents of
the specified file to a usable/convenient format.

The pipeline process collectively consists of two steps: build and deploy. The
build phase involves transforming a target into one or more output targets. This
transformation at the simplest level can just be a pass-through, leaving the
output target unchanged from its parent target.  The deploy phase consists of
processing all the output targets collectively. This may consist of combining,
transforming and writing to disk the set of output targets in some way.

The webdeploy system tracks dependencies as it goes, meaning dependencies are
not declared ahead of time. The dependency graph is saved to disk so that on a
subsequent run the system can more efficiently build/deploy the target
tree. This consists of the build system only processing targets that derive a
build product that depends on an out-of-date target. If the target tree is a
git repository, the system detects which blobs were modified/added by comparing
against the previously deployed commit (if any). For a path-based target tree,
the file modification times are used to detect changes (like Make).

An overview of the pipeline follows:

    0.1 Load the first valid configuration file in the target tree. A config
        file is used to specify how the project is to be built for deployment
        and should be committed into the repository. It is only needed to
        specify targets that need to be built.

        The following files are searched in the target tree:

          - Modules: The following are loaded as NodeJS modules such that
            "module.exports" is the config object. This format is flexible
            enough to allow for defining custom plugin functions.

              "webdeploy.config.js"
              ".webdeploy.config.js"

          - JSON: The following are loaded from a subobject "webdeploy" of a
            JSON file.

              "package.json"
              "composer.json"

    0.2 Load configuration from the repository's config file. If the target tree
        is not a git repository, then this step does nothing. This configuration
        should store settings related to the deployment, which is specific to
        the environment of the git repository. All of these configuration
        parameters are keyed under "webdeploy". The implementation allows these
        to exist in the target tree config file (e.g. "webdeploy.config.js") but
        this is not ideal since these two configurations should be kept
        separate.

    1.  Search the target tree recursively for targets matching rules defined by
        the configuration gathered in step 0.1. The order of the search is
        undefined.

    2.  Build each target.

        Each build operation is handled by a build plugin (see Plugins
        section). While a plugin can decide how it handles a certain target
        based on some criteria (e.g. file name pattern match, file content,
        ETC.), the configuration file denotes which targets among all available
        targets in the target tree are processed by.

        The order of builds is undefined; however output targets can be
        recursively processed or chained through multiple steps which create
        obvious dependencies.

        All build operations are executed before any deployment is executed.

    3.  Execute the deployment for the set of targets.

        A deployment is executed once to handle all targets. It decides how
        targets are written to the deployment environment. Deployments may
        chain to allow for more complex operations.

--------------------------------------------------------------------------------
Command usage

There are two basic, high-level commands: build and deploy. The build command is
a subset of the deploy command which also allows for a development
configuration.

    $ webdeploy build [path] [--dev] [--prod] [-f]

        path     - source path of tree to deploy; defaults to current directory

        --dev    - run in development mode [default]

        --prod   - run in production mode

        -f       - force rebuild (i.e. ignore existing dependency information)

      A build runs a deployment without loading the deployment
      configuration. This basically means it doesn't require a
      "webdeploy.deployPath" configuration parameter; instead, the deploy path
      is implicitly configured to be the same as the build path. This command
      does not run on git repositories: it's useful for building locally when
      testing. As such it supports a development configuration that allows for
      certain modules to be ignored in dev mode.

      NOTE: A webdeploy.config.js (or similar) file must still be available.

    $ webdeploy deploy [path] [-f]

        path - source path of tree to deploy; defaults to current directory

        -f       - force rebuild (i.e. ignore existing dependency information)

      Runs a deployment. The tool determines whether "path" refers to a
      git repository or just a normal directory tree. The semantics of operating
      on a git repository are different than those operating on a local path. A
      "deploy-path" option must be available.

      This command is really designed for git repositories, but it can work on
      normal directories also. It is recommened that "webdeploy.deployPath" is
      kept in git-config for the repository to separate it from the committed
      "webdeploy.config.js" file.

--------------------------------------------------------------------------------
Plugins

Plugins are external bits of code that add functionality to webdeploy. They come
in two flavors: build plugins and deployment plugins.

A build plugin transforms a target into one or more output targets. The plugin
can elect to have the resulting targets recursively processed.

A deployment plugin performs operations on the set of final output targets
produced during the build phase. It may transform the set of output targets in
some way before deploying the blobs to the filesystem. One deployment plugin is
configured for a project; however multiple deployment plugins can chain together
if needed.

A plugin is implemented as a NodeJS module whose module.exports conforms to the
plugin API.

--------------------------------------------------------------------------------
Plugin handlers

The webdeploy configuration specifies a list of plugin handlers for each
target. The plugin handlers denote which plugins to load and execute for a given
set of targets; additionally they contain configuration related to the plugin.

Each handler is an object of at least the form:

    {
        id: "plugin-id"
    }

The following extra configuration options are supported for any build
plugin. Their default values listed below are applied when one of these extra
configuration options is omitted:

    {
        dev: true,    // denotes if the handler is invoked in a development build
        build: true,  // denotes if the handler is invoked in a build at all
        path: ""      // an alternate base path for the resulting output target(s)
    }

Any other configuration options are plugin-specific.

Deploy plugins can have extra configuration parameters as well. These parameters
can be included in the target tree configuration. Alternatively, these can be
stored in a git repository's config under the section
"webdeploy.plugins.<plugin-id>". (NOTE: git-config is not yet supported since
nodegit lacks the necessary functionality.)

The webdeploy core code (i.e. this repository) comes with several core, built-in
plugins:

[build]

    pass - does absolutely nothing to the target except forward it along

        {
            id: "pass"
        }

[deployment]

    exclude - does absolutely nothing (i.e. excludes all targets from deployment)

        {
            id: "exclude"
        }

    write - writes output targets to the filesystem relative to the deploy path

        {
            id: "write",
            mode: 0o666
        }

The built-in plugins cannot be removed; they perform core operations.

--------------------------------------------------------------------------------
Standard plugins

This repository provides several standard plugins that aim to be universal in
application. They are located under the "plugins" subdirectory and take
precedence over any external plugins. However these plugins can be removed
(unlike the core, built-in plugins) if desired.

Provided plugins (along with their default options):

    minify - minifies JS and CSS

        {
            id: "minify",
            rename: true // A.js -> A.min.js
        }

    babel - leverages Babel

        {
            id: "babel",
            presets: ["env"]
        }

--------------------------------------------------------------------------------
